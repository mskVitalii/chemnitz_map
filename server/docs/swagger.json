{
    "swagger": "2.0",
    "info": {
        "description": "Chemnitz open data map by Vitalii Popov (backend) \u0026 Anastasiia Zibrova (frontend)",
        "title": "DWT-Chemnitz-map",
        "contact": {
            "name": "Vitalii Popov",
            "url": "https://www.linkedin.com/in/mskVitalii/",
            "email": "msk.vitaly@gmail.com"
        },
        "version": "1.0"
    },
    "host": "localhost:80",
    "basePath": "/",
    "paths": {
        "/api/v1/claims": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetches and returns the claims of the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Retrieves user claims",
                "responses": {
                    "200": {
                        "description": "Successful response with user claims",
                        "schema": {
                            "$ref": "#/definitions/dto.GetUserClaimsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.UnauthorizedResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/google/callback": {
            "get": {
                "tags": [
                    "auth"
                ],
                "summary": "Used by Google Auth provider",
                "responses": {}
            }
        },
        "/api/v1/google/login": {
            "get": {
                "tags": [
                    "auth"
                ],
                "summary": "Used by Google Auth provider",
                "responses": {}
            }
        },
        "/api/v1/healthcheck": {
            "get": {
                "description": "Check if the service is healthy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Perform health check",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/login": {
            "post": {
                "description": "Authenticates a user with email and password, and returns a JWT token if the credentials are valid.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Authenticates a user and returns a JWT token",
                "parameters": [
                    {
                        "description": "Login request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessLoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.UnauthorizedResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/logout": {
            "post": {
                "description": "Invalidates the JWT token for the user by adding it to the blacklist and removes the JWT cookie.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logs out a user and invalidates the JWT token",
                "responses": {
                    "200": {
                        "description": "Successful logout",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessLogoutResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/lib.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/place/{id}": {
            "get": {
                "description": "Retrieves a place from the MongoDB database by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "places"
                ],
                "summary": "Retrieves a place by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the place to retrieve",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/dto.ReadPlacesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/lib.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/refresh_token": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generates a new authentication token using the refresh token provided.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refreshes the authentication token",
                "responses": {
                    "200": {
                        "description": "Successful response with new token",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessRefreshTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.UnauthorizedResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/searchPlace": {
            "post": {
                "description": "Get places with pagination support",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "places"
                ],
                "summary": "Filters places",
                "parameters": [
                    {
                        "description": "List of category strings to filter places by.",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/dto.SearchPlacesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SearchPlacesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid limit parameter",
                        "schema": {
                            "$ref": "#/definitions/lib.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/user": {
            "post": {
                "description": "Creates a new user in the MongoDB database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Creates a new user",
                "parameters": [
                    {
                        "description": "User object to create",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/lib.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/lib.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/user/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a user from the MongoDB database by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieves a user by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user to retrieve",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/dto.GetUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.UnauthorizedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/lib.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/lib.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a user in the MongoDB database by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Updates a user by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User object with updated data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/lib.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/lib.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a user from the MongoDB database by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Deletes a user by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/lib.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Logs that are collected by prometheus and visualized in grafana",
                "tags": [
                    "service"
                ],
                "summary": "Prometheus logs",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "favourites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.UserFavourite"
                    }
                },
                "homes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.UserHome"
                    }
                },
                "password": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "userType": {
                    "type": "string"
                }
            }
        },
        "dto.CreateUserResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.DeleteUserResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.GetUserClaimsResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "userType": {
                    "type": "string"
                }
            }
        },
        "dto.GetUserResponse": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "favourites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.UserFavourite"
                    }
                },
                "homes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.UserHome"
                    }
                },
                "password": {
                    "type": "string"
                },
                "providers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "userType": {
                    "type": "string"
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.ReadPlacesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.Place"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.SearchPlacesRequest": {
            "type": "object",
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "hasEmail": {
                    "type": "string",
                    "example": "false"
                },
                "isBarrierFree": {
                    "type": "string",
                    "example": "false"
                },
                "other": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.SearchPlacesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.PlaceMinified"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.SuccessLoginResponse": {
            "type": "object",
            "properties": {
                "expire": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.SuccessLogoutResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.SuccessRefreshTokenResponse": {
            "type": "object",
            "properties": {
                "expire": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.UnauthorizedResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateUserResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "lib.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "model.Place": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "coords": {
                    "$ref": "#/definitions/model.Point"
                },
                "location": {
                    "type": "string"
                },
                "originalId": {
                    "type": "string"
                },
                "other": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "postCode": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                },
                "telephone": {
                    "type": "string"
                }
            }
        },
        "model.PlaceMinified": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "coords": {
                    "$ref": "#/definitions/model.Point"
                }
            }
        },
        "model.Point": {
            "type": "object",
            "properties": {
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "favourites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.UserFavourite"
                    }
                },
                "homes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.UserHome"
                    }
                },
                "password": {
                    "type": "string"
                },
                "providers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "userType": {
                    "type": "string"
                }
            }
        },
        "model.UserFavourite": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "coords": {
                    "$ref": "#/definitions/model.Point"
                }
            }
        },
        "model.UserHome": {
            "type": "object",
            "properties": {
                "coords": {
                    "$ref": "#/definitions/model.Point"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}